# -*- coding: utf-8 -*-
"""GANs_Assignment3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13e_MYvuwXIcpQ5M_hDnmgMDNwcyZV9QQ

##Importing packages
"""
# Eslam Sameh Hamdy     ID: 20180045
# Mahmoude Essam Massry ID: 20180359 
import keras
import numpy as np
import matplotlib.pyplot as plt
from keras import layers
from keras.models import Input, Model
from keras.datasets import mnist

"""##Loading data and Splitting it into train and test"""

# Loading and splitting images
(train_X, _),(test_X, _) = mnist.load_data()

print('X_train: ' + str(train_X.shape))
print('X_test:  '  + str(test_X.shape))

"""##Creating the models"""

input_img = keras.Input(shape=(28, 28, 1))
x = layers.Conv2D(16, (3, 3), activation='relu', padding='same')(input_img)
x = layers.MaxPooling2D((2, 2), padding='same')(x)
x = layers.Conv2D(8, (3, 3), activation='relu', padding='same')(x)
# x = layers.MaxPooling2D((2, 2), padding='same')(x)
# x = layers.Conv2D(8, (3, 3), activation='relu', padding='same')(x)
encoded = layers.MaxPooling2D((2, 2), padding='same')(x)

x = layers.Conv2D(8, (3, 3), activation='relu', padding='same')(encoded)
# x = layers.UpSampling2D((2, 2))(x)
# x = layers.Conv2D(8, (3, 3), activation='relu', padding='same')(x)
x = layers.UpSampling2D((2, 2))(x)
x = layers.Conv2D(16, (3, 3), activation='relu', padding='same')(x)
x = layers.UpSampling2D((2, 2))(x)
decoded = layers.Conv2D(1, (3, 3), activation='sigmoid', padding='same')(x)

autoencoder = Model(input_img, decoded)
autoencoder.compile(optimizer='adam', loss='binary_crossentropy')
autoencoder.summary()

train_X = train_X.astype('float32') / 255.
test_X = test_X.astype('float32') / 255.
train_X = np.reshape(train_X, (len(train_X), 28, 28, 1))
test_X = np.reshape(test_X, (len(test_X), 28, 28, 1))

for a in (autoencoder.weights):
  print (a.shape )

decoded_imgs = autoencoder.predict(test_X)

# Encoder model
encoder = Model(input_img, encoded)

# Decoder model
decoder_input= layers.Input(shape=(7, 7, 8))
x = autoencoder.layers[-5](decoder_input)
x = autoencoder.layers[-4](x)
x = autoencoder.layers[-3](x)
x = autoencoder.layers[-2](x)
decoder_output = autoencoder.layers[-1](x)
decoder = Model(decoder_input, decoder_output)

"""##Training the model"""

autoencoder.fit(train_X, train_X,
                epochs=50, #5, #50,
                batch_size=128,
                shuffle=True,
                validation_data=(test_X, test_X))

"""
## Decode and Encode unseen images (testing the model)
"""

# Test encoder and decoder
k = 5000
#for img in range(k):
test_imgs = test_X[:k,]
encoded = encoder.predict(test_imgs)
decoded = decoder.predict(encoded)

"""### Visualize the reconstructed circle against their original circle """

n = 10
plt.figure(figsize=(20, 4))
for i in range(1, n + 1):
    # Display original
    ax = plt.subplot(2, n, i)
    plt.imshow(test_X[i].reshape(28, 28))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)

    # Display reconstruction
    ax = plt.subplot(2, n, i + n)
    plt.imshow(decoded_imgs[i].reshape(28, 28))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
plt.show()

# plot coded images
print (encoded.shape)

plt.figure(figsize=(20, 8))
for i in range(1, n + 1):
    ax = plt.subplot(1, n, i)
    plt.imshow(encoded[i,:,:,3].reshape((7 , 7)))
    # plt.imshow(encoded_imgs[i].reshape((14 * 14 , 16)))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
plt.show()

# plot decoded images 
plt.figure(figsize=(20, 8))
for i in range(1, n + 1):
    ax = plt.subplot(2, n, i + n)
    plt.imshow(decoded[i].reshape(28, 28))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
plt.show()